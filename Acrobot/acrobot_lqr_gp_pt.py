# -*- coding: utf-8 -*-
"""Acrobot_lqr_GP_time14_sub20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sahZRN_ALWv3Wgg5UV3xwn22Jr1lQ4v5

## Setup
"""

# import CMGDB_util_0425
from datetime import datetime
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, WhiteKernel, Matern
from sklearn.multioutput import MultiOutputRegressor
import matplotlib
import dyn_tools
import RoA
import TimeMap
import MultivaluedMap
import CMGDB_util
import matplotlib.pyplot as plt
import random
import pandas as pd
import numpy as np
import CMGDB
import sys
import os
import warnings
warnings.filterwarnings("ignore")


# os.environ['DIRTMP_PATH'] = '/content/ML4KP-devel/'
# os.environ['PYTHONPATH'] = '/content/ML4KP-devel/lib/:/content/ML4KP-devel/examples/tripods:/content/Discrete_Dyn'
# os.environ['Torch_DIR'] = '/content/ML4KP-devel/libtorch/'
# sys.path.append('/content/ML4KP-devel/lib/')
# sys.path.append('/content/ML4KP-devel/examples/tripods')
# sys.path.append('/content/Discrete_Dyn')


# sys.path.append('/content/ML4KP-devel/examples/tripods')


# import CMGDB_util_new
# import RoA_new
# MG_util = CMGDB_util_new.CMGDB_util()
# MG_util = CMGDB_util.CMGDB_util()

MG_util = CMGDB_util.CMGDB_util()


def sample_points(lower_bounds, upper_bounds, num_pts):
    # Sample num_pts in dimension dim, where each
    # component of the sampled points are in the
    # ranges given by lower_bounds and upper_bounds
    dim = len(lower_bounds)
    X = np.random.uniform(lower_bounds, upper_bounds, size=(num_pts, dim))
    return X


sb = 2

subdiv_init = subdiv_min = subdiv_max = sb  # non adaptive proceedure

phase_periodic = [True, False]

# Define the parameters for CMGDB
lower_bounds = [0.0, -3.141592653589793, -6, -6]
upper_bounds = [6.283185307179586, 3.141592653589793, 6, 6]

"""## Function Setting (Dynamics with GP Prediction)"""

# Define a Gaussian process


def GP(X_train, Y_train):
    # fit Gaussian Process with dataset X_train, Y_train

    # DO #
    # kernel = RBF()  # define a kernel function here #
    kernel = Matern(length_scale=1.0, length_scale_bounds=(1e-15, 1e15),
                    nu=1.5)  # + WhiteKernel(noise_level_bounds=(1e-15, 1e15))
    # kernel = RationalQuadratic()

    # DO #
    n_restarts_optimizer = 9  # define a n_restarts_optimizerint value here #
    gp_ = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=n_restarts_optimizer)
    gp_.fit(X_train, Y_train)
    return gp_

# prediction function


def learned_f(X):
    X = np.array(X).reshape(1, -1)
    y1, s1 = gp1.predict(X, return_std=True)
    y2, s2 = gp2.predict(X, return_std=True)
    y3, s3 = gp1.predict(X, return_std=True)
    y4, s4 = gp2.predict(X, return_std=True)
    return np.concatenate((y1, y2, y3, y4), axis=1), np.concatenate((s1, s2, s3, s4), axis=0).reshape(1, -1)


"""## Time 14

### Initial 300 (time 14)
"""

time = 14  # time is equal to 5s

# load map
# set the time step
TM = TimeMap.TimeMap("acrobot_lqr", time,
                     "examples/tripods/lc_roa.yaml")


def g(X):
    Y = TM.acrobot_lqr(X)
    # Y = TM.pendulum_lc(X)
    return Y


np.random.seed(132)
n = 300  # specify a number of initial points #

# generate training data
X = sample_points(lower_bounds, upper_bounds, n)
print(X[0])
Y = [g(x_) for x_ in X]
Y = np.array(Y)

# train GP regression with X and Y
gp1 = GP(X, Y[:, 0].reshape(-1, 1))
gp2 = GP(X, Y[:, 1].reshape(-1, 1))
gp3 = GP(X, Y[:, 2].reshape(-1, 1))
gp4 = GP(X, Y[:, 3].reshape(-1, 1))


"""### morse set (time 14)"""

# Box_ptwise

# base name for the output files.
base_name = "acrobot_lqr_GP_time" + \
    str(time) + "_" + \
    str(subdiv_init) + "_" + \
    "Box_ptwise"


def F(rect):
    return MG_util.Box_ptwise(learned_f, rect, n=-2)


morse_graph, map_graph = MG_util.run_CMGDB(
    subdiv_min, subdiv_max, lower_bounds, upper_bounds, phase_periodic, F, base_name, subdiv_init)

startTime = datetime.now()

roa = RoA.RoA(map_graph, morse_graph)

print(f"Time to build the regions of attraction = {datetime.now() - startTime}")

fig, ax = roa.PlotMorseTiles()

plt.savefig("acrobot_lqr_box_ptwise.png")

print("Morse set Vol:", MG_util.Morse_sets_vol('output/' + base_name + '.csv'))
Vol = roa.Morse_sets_vol()
print("Roa Vol:", Vol)

CMGDB.PlotMorseGraph(morse_graph)
